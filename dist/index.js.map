{"version":3,"file":"index.js","sources":["../src/parseJSONWithComments.ts","../src/AliasesFromTSConfig.ts"],"sourcesContent":["/** Parses a JSON with comments to JavaScript value. */\nfunction parseJSONWithComments<T>(jsonWithComments: string): T {\n  return JSON.parse(jsonWithComments.replace(/\\/\\/[^\\n]*\\n/g, '\\n'));\n}\n\nexport default parseJSONWithComments;\n","import { readFileSync } from 'node:fs';\nimport { join, dirname, resolve } from 'node:path';\nimport type { TSConfig } from './TSConfig';\nimport parseJSONWithComments from './parseJSONWithComments';\n\n/**\n * An object with the aliases as property keys and paths as its values.\n *\n * @example\n * For this given `jsconfig.json`:\n * ```json\n * {\n *   \"compilerOptions\": {\n *     \"baseUrl\": \"./app\",\n *     \"paths\": {\n *       \"@\": [\"src/index.mjs\"],\n *       \"@/*\": [\"src/*\"],\n *       \"@ui/*\": [\"src/components/ui/*\"]\n *     }\n *   }\n * }\n * ```\n * It would be something like this object:\n * ```js\n * {\n *   '@': '/home/user/projects/example/app/src',\n *   '@ui': '/home/user/projects/example/app/src/components/ui'\n * }\n * ```\n */\nexport type AliasesForWebpack = {\n  [alias: string]: string;\n};\n\nclass AliasesFromTSConfig {\n  private baseUrl: string;\n\n  private aliases: {\n    alias: string;\n    matcher: RegExp;\n    replacer: string;\n  }[];\n\n  private tsconfigPath: string;\n\n  constructor(tsconfigPath: string) {\n    this.tsconfigPath = tsconfigPath;\n\n    const jsonWithComments = readFileSync(tsconfigPath).toString('utf-8');\n\n    const config = parseJSONWithComments<TSConfig>(jsonWithComments);\n\n    const paths = config.compilerOptions?.paths ?? {};\n\n    this.baseUrl = config.compilerOptions?.baseUrl ?? '.';\n\n    this.aliases = Object.entries(paths).map(([alias, locations]) => {\n      const group = `(?:${alias.replace(/\\*$/, '').replace(/\\W/g, '\\\\$&')})`;\n\n      return {\n        alias,\n        matcher: new RegExp(`^${group}${alias.endsWith('*') ? '(.*)' : ''}$`),\n        replacer: locations[0]?.replace(/\\/\\*$/, '') ?? '',\n      };\n    });\n  }\n\n  /** Resolves received path joining tsconfigPath's dirname and the baseUrl. */\n  private resolvePath(path: string): string {\n    return resolve(join(dirname(this.tsconfigPath), this.baseUrl, path));\n  }\n\n  /** Checks if received path contains an alias from jsconfig/tsconfig.json. */\n  hasAlias(path: string): boolean {\n    return this.aliases.some((alias) => alias.matcher.test(path));\n  }\n\n  /** Replaces the alias from jsconfig/tsconfig.json with the correct path. */\n  apply(path: string) {\n    for (const { matcher, replacer } of this.aliases) {\n      const result = matcher.exec(path);\n\n      if (!result) continue;\n\n      const pathWithoutAlias = result[1] ?? '';\n\n      return this.resolvePath(join(replacer, pathWithoutAlias));\n    }\n\n    return path;\n  }\n\n  /**\n   * Gets an object with the aliases as properties and paths as values.\n   *\n   * @example\n   * ```js\n   * // webpack.config.js\n   *\n   * const aliasesFromTSConfig = new AliasesFromTSConfig('./tsconfig.json');\n   *\n   * module.exports = {\n   *   resolve: {\n   *     alias: aliasesFromTSConfig.getAliasesForWebpack(),\n   *     // ...\n   *   },\n   *   // ...\n   * };\n   * ```\n   */\n  getAliasesForWebpack(): AliasesForWebpack {\n    const aliases: AliasesForWebpack = {};\n\n    for (const { alias, replacer } of this.aliases) {\n      const aliasForFolder = alias.endsWith('/*');\n\n      const property = aliasForFolder ? alias.slice(0, -2) : alias;\n\n      if (property in aliases && !aliasForFolder) continue;\n\n      aliases[property] = this.resolvePath(replacer);\n    }\n\n    return aliases;\n  }\n}\n\nexport default AliasesFromTSConfig;\n"],"names":["readFileSync","resolve","join","dirname"],"mappings":"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"}