{"version":3,"file":"index.js","sources":["../src/AliasesFromTSConfig.ts"],"sourcesContent":["import { join } from 'node:path';\nimport { readFileSync } from 'node:fs';\n\nclass AliasesFromTSConfig {\n  private baseUrl: string;\n\n  private aliases: {\n    matcher: RegExp;\n    replacer: string;\n  }[];\n\n  constructor(tsconfigPath: string) {\n    const jsonWithComments = readFileSync(tsconfigPath, 'utf-8');\n\n    const json = jsonWithComments.replace(/\\/\\/[^\\n]*\\n/g, '\\n');\n\n    const config = JSON.parse(json);\n\n    const paths: Record<string, [string]> = config.compilerOptions.paths ?? {};\n\n    this.baseUrl = config.compilerOptions.baseUrl ?? '.';\n\n    this.aliases = Object.entries(paths).map(([alias, locations]) => {\n      const group = `(?:${alias.replace(/\\*$/, '').replace(/\\W/g, '\\\\$&')})`;\n\n      return {\n        matcher: new RegExp(`^${group}${alias.endsWith('*') ? '(.*)' : ''}$`),\n        replacer: locations[0]?.replace(/\\/\\*$/, '') ?? '',\n      };\n    });\n  }\n\n  /** Checks if received path contains an alias from jsconfig/tsconfig.json. */\n  hasAlias(path: string): boolean {\n    return this.aliases.some((alias) => alias.matcher.test(path));\n  }\n\n  /** Replaces the alias from jsconfig/tsconfig.json with the correct path. */\n  apply(path: string) {\n    for (const { matcher, replacer } of this.aliases) {\n      const result = matcher.exec(path);\n\n      if (!result) continue;\n\n      const pathWithoutAlias = result[1] ?? '';\n\n      return join(this.baseUrl, replacer, pathWithoutAlias);\n    }\n\n    return path;\n  }\n}\n\nexport default AliasesFromTSConfig;\n"],"names":["readFileSync","join"],"mappings":";;;;;;;;;;;;;AAGA,MAAM,mBAAmB,CAAA;AAQvB,IAAA,WAAA,CAAY,YAAoB,EAAA;;QAC9B,MAAM,gBAAgB,GAAGA,oBAAY,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC;QAE7D,MAAM,IAAI,GAAG,gBAAgB,CAAC,OAAO,CAAC,eAAe,EAAE,IAAI,CAAC,CAAC;QAE7D,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAEhC,MAAM,KAAK,GAA6B,CAAA,EAAA,GAAA,MAAM,CAAC,eAAe,CAAC,KAAK,MAAI,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,EAAE,CAAC;QAE3E,IAAI,CAAC,OAAO,GAAG,CAAA,EAAA,GAAA,MAAM,CAAC,eAAe,CAAC,OAAO,MAAI,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,GAAG,CAAC;AAErD,QAAA,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,EAAE,SAAS,CAAC,KAAI;;AAC9D,YAAA,MAAM,KAAK,GAAG,CAAA,GAAA,EAAM,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC,GAAG,CAAC;YAEvE,OAAO;gBACL,OAAO,EAAE,IAAI,MAAM,CAAC,IAAI,KAAK,CAAA,EAAG,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,MAAM,GAAG,EAAE,CAAA,CAAA,CAAG,CAAC;AACrE,gBAAA,QAAQ,EAAE,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,SAAS,CAAC,CAAC,CAAC,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,mCAAI,EAAE;aACnD,CAAC;AACJ,SAAC,CAAC,CAAC;KACJ;;AAGD,IAAA,QAAQ,CAAC,IAAY,EAAA;QACnB,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,KAAK,KAAK,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;KAC/D;;AAGD,IAAA,KAAK,CAAC,IAAY,EAAA;;QAChB,KAAK,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,IAAI,IAAI,CAAC,OAAO,EAAE;YAChD,MAAM,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAElC,YAAA,IAAI,CAAC,MAAM;gBAAE,SAAS;YAEtB,MAAM,gBAAgB,GAAG,CAAA,EAAA,GAAA,MAAM,CAAC,CAAC,CAAC,MAAI,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,EAAE,CAAC;YAEzC,OAAOC,cAAI,CAAC,IAAI,CAAC,OAAO,EAAE,QAAQ,EAAE,gBAAgB,CAAC,CAAC;AACvD,SAAA;AAED,QAAA,OAAO,IAAI,CAAC;KACb;AACF;;;;"}